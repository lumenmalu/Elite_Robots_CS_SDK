cmake_minimum_required(VERSION 3.16)

project(elite-cs-series-sdk VERSION 1.2.0)

option(ELITE_COMPILE_TESTS "Compile tests" OFF)
option(ELITE_COMPILE_DOC "Compile documentation" OFF)
option(ELITE_COMPILE_EXAMPLES "Compile examples" ON)

include(cmake/utils.cmake)

if(NOT DEFINED CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD 17)
endif()

if(CMAKE_CXX_STANDARD EQUAL 17 OR CMAKE_CXX_STANDARD GREATER 17)
    message(STATUS "Selected C++ standard: C++17")
    set (ELITE_SDK_COMPILE_STANDARD 17)
elseif(CMAKE_CXX_STANDARD EQUAL 14)
    message(STATUS "Selected C++ standard: C++14")
    set(ELITE_SDK_COMPILE_STANDARD 14)
else()
    message(FATAL_ERROR  "C++ standard must C++14 or higher")
endif()

# Find third-party library
# BOOST动态库
set(BOOST_ROOT D:/code_lib/boost/boost_dll/debug)
set(Boost_LIBRARY_DIRS D:/code_lib/boost/boost_dll/debug/lib)
set(Boost_DEBUG ON)
cmake_policy(SET CMP0144 NEW)
find_package(Boost REQUIRED)
MESSAGE( STATUS "Boost_INCLUDE_DIRS = ${Boost_INCLUDE_DIRS}.")
MESSAGE( STATUS "Boost_LIBRARY_DIRS = ${Boost_LIBRARY_DIRS}.")
MESSAGE( STATUS "Boost_LIBRARIES = ${Boost_LIBRARIES}.")
MESSAGE( STATUS "Boost_LIB_VERSION = ${Boost_LIB_VERSION}.")
link_directories(${Boost_LIBRARY_DIRS}/lib)
include_directories(${Boost_INCLUDE_DIRS})
if(NOT BOOST_FOUND)
    message(AUTHOR_WARNING "Not found boost library. Subsequent compilations may fail.")
endif()



find_package(libssh)
if(libssh_FOUND)
    set(THIRDPARTY_LIB ${THIRDPARTY_LIB} ssh)
    add_definitions(-DELITE_USE_LIB_SSH)
endif()

configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/include/EliteOptions.hpp.in
    ${PROJECT_BINARY_DIR}/include/Elite/EliteOptions.hpp
)

# Source file list
set(
    ELITE_LIB_SOURCE_FILE
    source/Common/Utils.cpp
    source/Common/TcpServer.cpp
    source/Common/EliteException.cpp
    source/Common/SshUtils.cpp

    source/Primary/PrimaryPort.cpp
    source/Primary/PrimaryPortInterface.cpp
    source/Primary/RobotConfPackage.cpp

    source/Rtsi/RtsiClient.cpp
    source/Rtsi/RtsiClientInterface.cpp
    source/Rtsi/RtsiRecipeInternal.cpp
    source/Rtsi/RtsiIOInterface.cpp

    source/Dashboard/DashboardClient.cpp

    source/Control/ReverseInterface.cpp
    source/Control/TrajectoryInterface.cpp
    source/Control/ScriptSender.cpp
    source/Control/ScriptCommandInterface.cpp

    source/Elite/VersionInfo.cpp
    source/Elite/EliteDriver.cpp
    source/Elite/Log.cpp
    source/Elite/Logger.cpp
    source/Elite/RemoteUpgrade.cpp
    source/Elite/ControllerLog.cpp
)

set(
    ELITE_LIB_INCLUDE_DIR
    ${PROJECT_SOURCE_DIR}
    ${PROJECT_SOURCE_DIR}/include/Common
    ${PROJECT_SOURCE_DIR}/include/Primary
    ${PROJECT_SOURCE_DIR}/include/Rtsi
    ${PROJECT_SOURCE_DIR}/include/Dashboard
    ${PROJECT_SOURCE_DIR}/include/Elite
    ${PROJECT_SOURCE_DIR}/include/Control
    ${PROJECT_SOURCE_DIR}/include/
    ${PROJECT_BINARY_DIR}/include/
)

# Head file list
set(
    ELITE_HEADER_FILES

    Elite/DataType.hpp
    Elite/VersionInfo.hpp
    Elite/EliteDriver.hpp
    Elite/Log.hpp
    Elite/RemoteUpgrade.hpp
    Elite/ControllerLog.hpp

    Dashboard/DashboardClient.hpp

    Rtsi/RtsiClientInterface.hpp
    Rtsi/RtsiIOInterface.hpp
    Rtsi/RtsiRecipe.hpp

    Primary/PrimaryPackage.hpp
    Primary/RobotConfPackage.hpp
    Primary/PrimaryPortInterface.hpp

    EliteException.hpp


)

# Set output library default name
set(SDK_STATIC_LIB_OUTPUT_NAME "${PROJECT_NAME}")
set(SDK_SHARED_LIB_OUTPUT_NAME "${PROJECT_NAME}")

# Configure accordingly based on the operating system.
if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
    message(STATUS "SYSTEM: Windows")
    add_definitions(
        -D_WIN32_WINNT=0x0601
        -DELITE_EXPORT_LIBRARY
    )
    set(SDK_STATIC_LIB_OUTPUT_NAME "${PROJECT_NAME}_static")
    set(SDK_SHARED_LIB_OUTPUT_NAME "${PROJECT_NAME}")    # 添加debug,区分
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    message(STATUS "SYSTEM: Linux")
    set(SYSTEM_LIB pthread)
else()
    message(FATAL_ERROR "Unsupport operating system")
endif()


# Add library
add_library(
    ${PROJECT_NAME}_SHARED
    SHARED
    ${ELITE_LIB_SOURCE_FILE}
)
add_library(
    ${PROJECT_NAME}_STATIC
    STATIC
    ${ELITE_LIB_SOURCE_FILE}
)

define_rel_file_macro(${PROJECT_NAME}_SHARED)
define_rel_file_macro(${PROJECT_NAME}_STATIC)
set_target_properties(${PROJECT_NAME}_SHARED PROPERTIES OUTPUT_NAME ${SDK_SHARED_LIB_OUTPUT_NAME})
set_target_properties(${PROJECT_NAME}_STATIC PROPERTIES OUTPUT_NAME ${SDK_STATIC_LIB_OUTPUT_NAME})
target_include_directories(
    ${PROJECT_NAME}_SHARED
    PRIVATE
    ${ELITE_LIB_INCLUDE_DIR}
)
target_include_directories(
    ${PROJECT_NAME}_STATIC
    PRIVATE
    ${ELITE_LIB_INCLUDE_DIR}
)
target_link_libraries(
    ${PROJECT_NAME}_SHARED
    PRIVATE
    ${THIRDPARTY_LIB}
)
target_link_libraries(
    ${PROJECT_NAME}_STATIC
    PRIVATE
    ${THIRDPARTY_LIB}
)

# Copy head file
foreach(header ${ELITE_HEADER_FILES})
    file(COPY ${PROJECT_SOURCE_DIR}/include/${header} 
         DESTINATION ${PROJECT_BINARY_DIR}/include/Elite)
endforeach()

# Prepare exporting targets
add_library(${PROJECT_NAME}::shared ALIAS ${PROJECT_NAME}_SHARED)
target_include_directories(
    ${PROJECT_NAME}_SHARED
    PUBLIC
    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>  
    $<INSTALL_INTERFACE:include>
)
add_library(${PROJECT_NAME}::static ALIAS ${PROJECT_NAME}_STATIC)
target_include_directories(
    ${PROJECT_NAME}_STATIC
    PUBLIC
    $<BUILD_INTERFACE:${PROJECT_BINARY_DIR}/include>  
    $<INSTALL_INTERFACE:include>
)

# Is compile examples
if(ELITE_COMPILE_EXAMPLES)
    message(STATUS "Compile the exmaples")
    add_subdirectory(example ${CMAKE_BINARY_DIR}/example/)
endif()

# If compile documentation
if(ELITE_COMPILE_DOC)
    message(STATUS "Compile the documentation.")
    add_subdirectory(doc ${CMAKE_BINARY_DIR}/doc/)
endif()

# If googel test has been foune, compile unit test
if (ELITE_COMPILE_TESTS)
    message(STATUS "Compile the tests")
    add_subdirectory(test ${CMAKE_BINARY_DIR}/test/)
endif()

# Disable installation if project imported with FetchContent
string(COMPARE EQUAL "${CMAKE_SOURCE_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}" is_top_level)
option(ELITE_INSTALL "Include packaging rules" "${is_top_level}")

# On the Linux platform, install binary library files, header files, and CMake configuration files.
if(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND ELITE_INSTALL)
    include(GNUInstallDirs)
    install(
        TARGETS ${PROJECT_NAME}_SHARED ${PROJECT_NAME}_STATIC
        EXPORT ${PROJECT_NAME}Targets
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    )
    install(
        DIRECTORY  ${PROJECT_BINARY_DIR}/include/
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
    )
    install(
        DIRECTORY ${PROJECT_SOURCE_DIR}/source/resources/
        DESTINATION share/Elite
    )

    include(CMakePackageConfigHelpers)
    configure_package_config_file(
        "${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
        INSTALL_DESTINATION lib/cmake/${PROJECT_NAME}
    )
    write_basic_package_version_file(
        ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake 
        VERSION ${PROJECT_VERSION} 
        COMPATIBILITY SameMajorVersion
    )

    install(
        EXPORT ${PROJECT_NAME}Targets
        FILE ${PROJECT_NAME}Targets.cmake
        DESTINATION lib/cmake/${PROJECT_NAME}
    )
    install(
        FILES
        "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
        "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
        DESTINATION lib/cmake/${PROJECT_NAME}
    )
endif()

message(STATUS "CMAKE_BUILD_TYPE:                   ${CMAKE_BUILD_TYPE}")
message(STATUS "CMAKE_C_COMPILER:                   ${CMAKE_C_COMPILER} (id ${CMAKE_C_COMPILER_ID}, clang ${CLANG}, GNUC ${GNUC}, version ${CMAKE_C_COMPILER_VERSION})")
message(STATUS "CMAKE_CXX_COMPILER:                 ${CMAKE_CXX_COMPILER} (id ${CMAKE_CXX_COMPILER_ID}, clang ${CLANG}, GNUC ${GNUC}, version ${CMAKE_CXX_COMPILER_VERSION})")
message(STATUS "CMAKE_C_FLAGS:                      ${CMAKE_C_FLAGS}")
message(STATUS "CMAKE_CXX_FLAGS:                    ${CMAKE_CXX_FLAGS}")
message(STATUS "CMAKE_INSTALL_INCLUDEDIR:           ${CMAKE_INSTALL_INCLUDEDIR}")
message(STATUS "CMAKE_INSTALL_LIBDIR:               ${CMAKE_INSTALL_LIBDIR}")
message(STATUS "THIRDPARTY_LIB                      ${THIRDPARTY_LIB}")
